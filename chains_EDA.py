# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1svrnnHiFuCGo3LPeqhYtG9qbFsoTRZ--
"""

import pickle
import numpy as np
import pandas as pd
import re
import json
from collections import Counter
import seaborn as sns

pd.set_option("display.max_columns", None)

from google.colab import drive
drive.mount('/content/drive')

PATH_TO_CHAIN = '/content/drive/MyDrive/MADE/project/chains.pkl'
PATH_TO_ORDERS = '/content/drive/MyDrive/MADE/project/orders'
PATH_TO_RATING = '/content/drive/MyDrive/MADE/project/rest_ratings.pkl'

"""# Orders"""

path_to_files = r'/content/drive/MyDrive/MADE/project/orders'
tables = []
for num in range(1, 3):
    filename = f'{path_to_files}/orders{num}.pkl'
    print(filename)
    tables.append(pd.read_pickle(filename))

orders_df = pd.concat(tables)

orders_df.head(1)

orders_group_df = orders_df\
.groupby('chain_id')\
.agg(
    {'discount_value': [min, max, np.mean, np.median],
     'total_value': [min, max, np.mean, np.median],
     'initial_product_sum': [min, max, np.mean, np.median],
    }
)

orders_group_df

"""# Raitings"""

rating_df = pd.read_pickle('/content/drive/MyDrive/MADE/project/rest_ratings.pkl')

rating_df.set_index('chain_id',inplace=True)
rating_df.drop(['info','created_at'], axis=1, inplace=True)

"""# Chain"""

chains_df = pd.read_pickle(PATH_TO_CHAIN)

chains_df.drop(
    chains_df[chains_df.chain_id.isna()].index,
    axis=0,
    inplace=True,
)

chains_df.drop(
    chains_df[chains_df.is_test_chain == 1].index,
    axis=0,
    inplace=True,
)

chains_df.drop(
    chains_df[chains_df.chain_deleted == 1].index,
    axis=0,
    inplace=True,
)

def count_val(col: pd.Series):
    return pd.Series([i for lst in col for i in lst])
top_product_dict = Counter(count_val(chains_df.product_group_ids.dropna()).value_counts().to_dict(dict))
top_cousine_dict = Counter(count_val(chains_df.product_group_ids.dropna()).value_counts().to_dict(dict))

"""Мысли по поводу флагов активности  
chain_active - существует ли сеть еще  
chain_deleted - наличие сети в сервисе delivery club  
Для обучения наверно можно испольовать, в тесте наверно нужно будет удалить сети с флагом chain_deleted

BURGER&LIMONAD - сайт мертв    
Мосгурман - не гуглится  
Wheelie PUB - сайт мертв  
Foodsun - не гуглица  
Кондитерская Pinocchio - гуглица и работает, Busted

---Что делать с обьектами у которых chain_id None, может к vendor id добавить соль и использовать получившееся значение как chain при обучении---

Топ product_group_id
"""

chains_df.product_group_ids = chains_df.product_group_ids.apply(lambda d: d if isinstance(d, list) else [])

chains_df.loc[:,'top3_products'] = chains_df.product_group_ids.map(lambda x: any([True for i in x if i in [i[0] for i in top_product_dict.most_common(3)]]))
chains_df.loc[:,'top1_products'] = chains_df.product_group_ids.map(lambda x: any([True for i in x if i in [i[0] for i in top_product_dict.most_common(1)]]))
chains_df.loc[:,'top10_products'] = chains_df.product_group_ids.map(lambda x: any([True for i in x if i in [i[0] for i in top_product_dict.most_common(10)]]))
chains_df.loc[:,'defaults_in_top3'] = chains_df.default_product_group_id.map(lambda x: True if x in [i[0] for i in top_product_dict.most_common(3)] else False)

chains_df.loc[:,'vendors_in_chain'] = chains_df.groupby('chain_id')['defaults_in_top3'].transform(len)

chains_df.drop([
 'vendor_id', 'chain_name', 'chain_name_en',
       'chain_created_at', 'vendor_created_at',
       'category_id', 'default_product_group_id', 'product_group_ids',
       'cuisine_ids', 'food_for_points_marker', 'takeaway_support',
       'is_test_chain', 'citymobil_support',
       'deliveryprovider_id'
       ],axis=1, inplace=True)

chains_df.head(1)

chains__group_df = chains_df.groupby('chain_id')['delivery_cost', 'min_delivery_value', 'min_delivery_time','is_qsr', 'top3_products', 'top1_products', 'top10_products', 'defaults_in_top3','vendors_in_chain'].agg(np.mean)

df = chains__group_df.join(orders_group_df, how='inner').join(rating_df)

df

rest_ratings_df = pd.read_pickle('data/rest_ratings.pkl')
rest_ratings_df.set_index('chain_id',inplace=True)

chains_df[chains_df.chain_deleted == 0].chain_id.nunique()

orders_group_df = orders_group_df.join(rest_ratings_df,how='left')

orders_group_df.raiting.fillna(np.median,inplace = True)

menu_df = pd.read_pickle('data/menu.pkl')

chain_price = menu_df.groupby('chain_id').agg({'product_price': [min,max,np.mean,np.median]})

orders_group_df = orders_group_df.join(chain_price,how='inner')

test_valid_df = pd.read_pickle('data/test_VALID.pkl')

test_valid_df.head()

pip install h3

from collections import OrderedDict, Counter

d = OrderedDict

OrderedDict.fromkeys('aabcd')
for i in 'aabcd':
    d[i] = d.get(i, 0) + 1
    print(d)

for i in